const heroStats = [
  { value: "1,5 —Å–µ–∫", label: "–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —É–ª—å—Ç—Ä–∞—Ä–µ–∂–∏–º–µ" },
  { value: "18 400+", label: "–¢—Ä–∞–Ω—Å–ª—è—Ü–∏–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ VelocityCast" },
  { value: "4K HDR", label: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–∞" },
  { value: "12 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", label: "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏ –ø–ª–µ–µ—Ä–æ–≤" }
];

const tickerEvents = [
  { tag: "LIVE", text: "–§–∏–Ω–∞–ª –ö–•–õ ¬∑ —Ä–µ–∂–∏–º –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω" },
  { tag: "NEW", text: "–§–æ—Ä–º—É–ª–∞ 1 ¬∑ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è –±–æ–ª–∏–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏" },
  { tag: "BOOST", text: "–ù–ë–ê ¬∑ –º—É–ª—å—Ç–∏—ç–∫—Ä–∞–Ω —Å 4 —É–≥–ª–∞–º–∏ –∫–∞–º–µ—Ä—ã –∏ —á–∞—Ç-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º" }
];

const features = [
  {
    icon: "‚ö°",
    title: "–£–ª—å—Ç—Ä–∞—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø–æ—Ç–æ–∫",
    description:
      "–°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–æ—Ä—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–æ 1,5 —Å–µ–∫—É–Ω–¥—ã –±–ª–∞–≥–æ–¥–∞—Ä—è WebRTC –∏ CDN-—É–∑–ª–∞–º, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–º –≤ 36 –≥–æ—Ä–æ–¥–∞—Ö."
  },
  {
    icon: "üé•",
    title: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏—Å—Å—ë—Ä",
    description:
      "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã, –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫—É –∏ –¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏."
  },
  {
    icon: "üì±",
    title: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–µ—Ç—Ç–∏–Ω–≥–æ–º",
    description:
      "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ—ç–Ω—Ç–µ–∑–∏-–ª–∏–≥–∞–º–∏ –∏ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–∏–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏: –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–∫–Ω–∞."
  },
  {
    icon: "ü§ñ",
    title: "–£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏",
    description:
      "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –≤–æ–∑–º–æ–∂–Ω—ã–µ VR-–ø–æ–≤—Ç–æ—Ä—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç —Ö–∞–π–ª–∞–π—Ç—ã."
  }
];

const schedule = [
  {
    sport: "–§—É—Ç–±–æ–ª",
    league: "–õ–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤",
    title: "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏ ‚Äî –ë–∞–≤–∞—Ä–∏—è",
    start: "22:00",
    mode: "ultra",
    quality: "4K HDR",
    description: "–£–ª—å—Ç—Ä–∞—Å–∫–æ—Ä–æ—Å—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π xG –∏ 6 –∫–∞–º–µ—Ä–∞–º–∏.",
    extras: ["–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Fantasy League", "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"]
  },
  {
    sport: "–•–æ–∫–∫–µ–π",
    league: "–ö–•–õ –§–∏–Ω–∞–ª",
    title: "–ê–∫ –ë–∞—Ä—Å ‚Äî –°–ö–ê",
    start: "19:30",
    mode: "multiview",
    quality: "1440p",
    description: "–ú—É–ª—å—Ç–∏—ç–∫—Ä–∞–Ω —Å bench-–∫–∞–º–µ—Ä–æ–π –∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –±—Ä–æ—Å–∫–æ–≤.",
    extras: ["–ì—Ä–∞—Ñ–∏–∫–∞ —Å–∏–ª—ã –±—Ä–æ—Å–∫–∞", "–°—Ç—É–¥–∏–π–Ω—ã–π —á–∞—Ç"]
  },
  {
    sport: "–ë–∞—Å–∫–µ—Ç–±–æ–ª",
    league: "NBA",
    title: "–õ–µ–π–∫–µ—Ä—Å ‚Äî –£–æ—Ä—Ä–∏–æ—Ä–∑",
    start: "05:00",
    mode: "ultra",
    quality: "1080p/120",
    description: "–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ Second Spectrum –∏ AR-–ø–æ–≤—Ç–æ—Ä–∞–º–∏.",
    extras: ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∫—É—Ä—Å—ã"]
  },
  {
    sport: "–ê–≤—Ç–æ—Å–ø–æ—Ä—Ç",
    league: "–§–æ—Ä–º—É–ª–∞ 1",
    title: "–ì—Ä–∞–Ω-–ø—Ä–∏ –ú–æ–Ω—Ü—ã",
    start: "16:00",
    mode: "mobile",
    quality: "720p",
    description: "–õ—ë–≥–∫–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π DRS –∏ –∫–∞—Ä—Ç–æ–π —Ç—Ä–∞—Å—Å—ã.",
    extras: ["Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–†–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"]
  },
  {
    sport: "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç",
    league: "The International",
    title: "Team Spirit ‚Äî Gaimin Gladiators",
    start: "14:00",
    mode: "multiview",
    quality: "1080p",
    description: "–ß–µ—Ç—ã—Ä–µ POV –ø–æ—Ç–æ–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä–∞—Ñ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
    extras: ["–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∏–∫–∏", "–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç"]
  },
  {
    sport: "–¢–µ–Ω–Ω–∏—Å",
    league: "ATP Masters",
    title: "–î–∂–æ–∫–æ–≤–∏—á ‚Äî –ê–ª—å–∫–∞—Ä–∞—Å",
    start: "18:30",
    mode: "ultra",
    quality: "4K",
    description: "–†–µ–∂–∏–º PointCast —Å –≥—Ä–∞—Ñ–∏–∫–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏.",
    extras: ["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–ø–æ–≤"]
  }
];

const technologies = [
  {
    label: "Edge CDN",
    title: "36 —É–∑–ª–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏",
    description:
      "–†–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —Å–µ—Ç—å –ø–æ –ï–≤—Ä–æ–ø–µ –∏ –ê–∑–∏–∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å —Å–∏–≥–Ω–∞–ª–∞ –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –¥–∞–∂–µ –≤ —á–∞—Å—ã –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏."
  },
  {
    label: "Adaptive Bitrate",
    title: "–î–æ 12 –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞",
    description:
      "–ê–ª–≥–æ—Ä–∏—Ç–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä–æ–≤, –Ω–µ –æ–±—Ä—ã–≤–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é."
  },
  {
    label: "Predictive Replay",
    title: "–ü–æ–≤—Ç–æ—Ä—ã –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã",
    description:
      "–ú–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç–º–µ—á–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≥–æ—Ç–æ–≤–∏—Ç –∫–ª–∏–ø—ã –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
  },
  {
    label: "Sync API",
    title: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –≤–∏–¥–∂–µ—Ç—ã",
    description:
      "API –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è, —Ç–∞–π–º–∫–æ–¥—ã –∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –¥–ª—è –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä–æ–≤, –±–∞—Ä–æ–≤ –∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π."
  }
];

const state = {
  theme: localStorage.getItem("velocity-theme") || "dark",
  lastUpdated: Date.now()
};

document.addEventListener("DOMContentLoaded", () => {
  document.documentElement.setAttribute("data-theme", state.theme);
  const toggleThemeBtn = document.getElementById("toggle-theme");
  toggleThemeBtn.textContent = state.theme === "dark" ? "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" : "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞";

  renderHeroStats();
  renderTicker();
  renderFeatures();
  renderFilters();
  renderSchedule();
  renderTech();
  updateTimestamp();
  setupAccordion();

  toggleThemeBtn.addEventListener("click", toggleTheme);
  document.getElementById("sport-filter").addEventListener("change", renderSchedule);
  document.getElementById("mode-filter").addEventListener("change", renderSchedule);
  document.getElementById("manual-refresh").addEventListener("click", () => {
    state.lastUpdated = Date.now();
    renderSchedule(true);
    updateTimestamp();
  });
});

function renderHeroStats() {
  const container = document.getElementById("hero-stats");
  container.innerHTML = "";
  heroStats.forEach(stat => {
    const card = document.createElement("div");
    card.className = "hero-stat";
    card.innerHTML = `
      <span class="hero-stat__value">${stat.value}</span>
      <span class="hero-stat__label">${stat.label}</span>
    `;
    container.append(card);
  });
}

function renderTicker() {
  const ticker = document.getElementById("hero-ticker");
  ticker.innerHTML = "";
  tickerEvents.forEach(event => {
    const row = document.createElement("div");
    row.className = "ticker__row";
    row.innerHTML = `
      <span>${event.tag}</span>
      <span>${event.text}</span>
    `;
    ticker.append(row);
  });
}

function renderFeatures() {
  const grid = document.getElementById("feature-grid");
  grid.innerHTML = "";
  features.forEach(feature => {
    const card = document.createElement("article");
    card.className = "feature-card";
    card.innerHTML = `
      <div class="feature-card__icon">${feature.icon}</div>
      <h3>${feature.title}</h3>
      <p>${feature.description}</p>
    `;
    grid.append(card);
  });
}

function renderFilters() {
  const sportFilter = document.getElementById("sport-filter");
  const sports = Array.from(new Set(schedule.map(item => item.sport)));
  sportFilter.innerHTML = '<option value="all">–í—Å–µ</option>';
  sports.forEach(sport => {
    const option = document.createElement("option");
    option.value = sport;
    option.textContent = sport;
    sportFilter.append(option);
  });
}

function renderSchedule(shuffle = false) {
  const grid = document.getElementById("schedule-grid");
  grid.innerHTML = "";
  const sportFilter = document.getElementById("sport-filter").value;
  const modeFilter = document.getElementById("mode-filter").value;

  let items = [...schedule];
  if (shuffle) {
    items = items.sort(() => Math.random() - 0.5);
  }

  items
    .filter(item => (sportFilter === "all" ? true : item.sport === sportFilter))
    .filter(item => (modeFilter === "all" ? true : item.mode === modeFilter))
    .forEach(item => {
      const card = document.createElement("article");
      card.className = "schedule-card";
      card.innerHTML = `
        <div class="schedule-card__header">
          <div>
            <h3>${item.title}</h3>
            <div class="schedule-card__meta">${item.league} ¬∑ ${item.sport}</div>
          </div>
          <span class="badge">${formatModeLabel(item.mode)}</span>
        </div>
        <p>${item.description}</p>
        <div class="schedule-card__meta">–°—Ç–∞—Ä—Ç –≤ ${item.start} ¬∑ ${item.quality}</div>
        <ul>
          ${item.extras.map(extra => `<li>${extra}</li>`).join("")}
        </ul>
      `;
      grid.append(card);
    });

  if (!grid.children.length) {
    grid.innerHTML = '<div class="empty-state">–ù–µ—Ç —ç—Ñ–∏—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º</div>';
  }
}

function renderTech() {
  const grid = document.getElementById("tech-grid");
  grid.innerHTML = "";
  technologies.forEach(tech => {
    const card = document.createElement("article");
    card.className = "tech-card";
    card.innerHTML = `
      <span class="tech-card__label">${tech.label}</span>
      <h3>${tech.title}</h3>
      <p>${tech.description}</p>
    `;
    grid.append(card);
  });
}

function updateTimestamp() {
  const label = document.getElementById("last-update");
  const formatter = new Intl.DateTimeFormat("ru-RU", {
    hour: "2-digit",
    minute: "2-digit"
  });
  label.textContent = `–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ ${formatter.format(state.lastUpdated)}`;
}

function toggleTheme() {
  state.theme = state.theme === "dark" ? "light" : "dark";
  document.documentElement.setAttribute("data-theme", state.theme);
  localStorage.setItem("velocity-theme", state.theme);
  this.textContent = state.theme === "dark" ? "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" : "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞";
}

function setupAccordion() {
  const accordion = document.getElementById("faq-accordion");
  accordion.querySelectorAll(".accordion__trigger").forEach(button => {
    button.addEventListener("click", () => {
      const expanded = button.getAttribute("aria-expanded") === "true";
      accordion.querySelectorAll(".accordion__trigger").forEach(other => {
        if (other !== button) {
          other.setAttribute("aria-expanded", "false");
          other.nextElementSibling.hidden = true;
        }
      });
      button.setAttribute("aria-expanded", String(!expanded));
      button.nextElementSibling.hidden = expanded;
    });
  });
}

function formatModeLabel(mode) {
  switch (mode) {
    case "ultra":
      return "–£–ª—å—Ç—Ä–∞—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π";
    case "multiview":
      return "–ú—É–ª—å—Ç–∏—ç–∫—Ä–∞–Ω";
    case "mobile":
      return "–ú–æ–±–∏–ª—å–Ω—ã–π";
    default:
      return mode;
  }
}
